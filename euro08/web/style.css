@charset "utf-8";
body  {
	font: 100% Verdana, Arial, Helvetica, sans-serif;
	background: #666666;
	margin: 0; /* Es empfiehlt sich, margin (Rand) und padding (AuffÃ¼llung) des Body-Elements auf 0 einzustellen, um unterschiedlichen Browser-Standardeinstellungen Rechnung zu tragen. */
	padding: 0;
	text-align: center; /* Hierdurch wird der Container in IE 5*-Browsern zentriert. Dem Text wird dann im #container-Selektor die Standardausrichtung left (links) zugewiesen. */
	color: #000000;
	vertical-align: middle;
    }
	
h1 {
	font-size: large;
	font-style: normal;
}

.twoColLiqLtHdr #container #header img {
	padding-right: 20px;
}

.formUserError {
	color:red;
	font-size:smaller;
	font-weight:bold;
}

	
h2 {
	font-size: medium;
	font-style: normal;
}

h3 {
	font-size: small;
	font-style: normal;
}
    .twoColLiqLtHdr #container { 
    	width: 80%;  /* Hierdurch wird ein Container mit einer Breite erstellt, die 80% der Browserbreite betrÃ¤gt. */
    	background: #FFFFFF;
    	margin: 0 auto; /* Durch automatische RÃ¤nder (in Verbindung mit einer Breite) wird die Seite zentriert. */
    	border: 1px solid #000000;
    	text-align: left; /* Hierdurch wird die Einstellung text-align: center im Body-Element Ã¼berschrieben. */
    } 
    .twoColLiqLtHdr #header {
	padding: 0 10px;  /* Diese AuffÃ¼llung entspricht der linksbÃ¼ndigen Ausrichtung der Elemente in den divs, die darunter erscheinen. Wenn im #header anstelle von Text ein Bild eingesetzt wird, sollten Sie die AuffÃ¼llung entfernen. */
	background-color: #FFFFFF;
	border-bottom: solid 5px #cccccc;
    } 
    .twoColLiqLtHdr #header h1 {
	margin: 0; /* Wenn Sie den Rand des letzten Elements im #header-div auf 0 einstellen, kÃ¶nnen Sie das Auftreten unerwarteter AbstÃ¤nde zwischen divs vermeiden. Wenn das div einen Rahmen hat, ist dies unnÃ¶tig, weil dieser Rahmen die gleiche Wirkung hat. */
	padding: 10px 0; /* Durch die Verwendung der AuffÃ¼llung anstelle von RÃ¤ndern lÃ¤sst sich gewÃ¤hrleisten, dass das Element die Kanten des div nicht berÃ¼hrt. */
    }
    
    /* Tipps fÃ¼r sidebar1:
    1. Da wir mit Prozentwerten arbeiten, ist es empfehlenswert, fÃ¼r die Randleiste keine AuffÃ¼llung zu verwenden. Sie wird bei standardgerechten Browsern der Breite hinzugefÃ¼gt, und dies wiederum fÃ¼hrt zu einer unbekannten tatsÃ¤chlichen Breite. 
    2. Zwischen der Kante des div und den darin liegenden Elementen kann ein Abstand eingefÃ¼gt werden, indem Sie diesen Elementen wie in ".twoColLiqLtHdr #sidebar1 p" demonstriert einen linken und rechten Rand zuweisen.
    3. Da Explorer die Breiten nach der Wiedergabe des Ã¼bergeordneten Elements berechnet, treten bei prozentbasierten Spalten gelegentlich unerklÃ¤rliche Fehler auf. Wenn Sie zuverlÃ¤ssigere Ergebnisse wÃ¼nschen, sollten Sie pixelbasierte Spalten verwenden.
    */
    .twoColLiqLtHdr #sidebar1 {
	float: left;
	width: 24%; /* Da es sich hier um ein floatendes Element handelt, muss eine Breite angegeben werden. */
	background: #EBEBEB; /* Die Hintergrundfarbe wird nur fÃ¼r die LÃ¤nge des Spalteninhalts angezeigt. */
	padding: 15px 0 0 15px; /* Durch die AuffÃ¼llung oben und unten entsteht in diesem div ein visueller Leerraum.  */
    }
    .twoColLiqLtHdr #sidebar1 h3, .twoColLiqLtHdr #sidebar1 p {
    	margin-left: 10px; /* FÃ¼r jedes Element, das in den seitlichen Spalten platziert wird, sollten ein linker und ein rechter Rand angegeben werden. */
    	margin-right: 10px;
    }
    
    /* Tipps fÃ¼r mainContent:
    1. Der Abstand zwischen mainContent und sidebar1 entsteht durch den linken Rand des mainContent-div. Der Spaltenbereich bleibt unabhÃ¤ngig von der Inhaltsmenge des sidebar1-div immer gleich. Sie kÃ¶nnen diesen linken Rand entfernen, falls der Text des #mainContent-div den Bereich von #sidebar1 fÃ¼llen soll, wenn der Inhalt in #sidebar1 endet.
    2. Zur Vermeidung von Float-Drops bei einer unterstÃ¼tzten MindestauflÃ¶sung von 800 x 600 sollten Elemente im mainContent-div eine GrÃ¶ÃŸe von maximal 430 Pixel aufweisen (dies gilt auch fÃ¼r Bilder).
    3. Im unten stehenden bedingten Kommentar fÃ¼r Internet Explorer wird die Zoom-Eigenschaft verwendet, um mainContent die Eigenschaft hasLayout zuzuweisen. Dadurch werden verschiedene IE-spezifische Fehler verhindert.
    */
    .twoColLiqLtHdr #mainContent {
	margin: 0 20px 0 26%; /* Der rechte Rand kann in Prozent oder Pixel angegeben werden. Durch ihn entsteht der Abstand am rechten Seitenrand. */
	padding: 0 0 0 20px;
    } 
.twoColLiqLtHdr #index {
	margin: 0 20px 30px 0; /* Der rechte Rand kann in Prozent oder Pixel angegeben werden. Durch ihn entsteht der Abstand am rechten Seitenrand. */
	padding: 0 0 0 20px;
}

    .twoColLiqLtHdr #footer { 
    	padding: 0 10px; /* Diese AuffÃ¼llung entspricht der linksbÃ¼ndigen Ausrichtung der Elemente in den divs, die darunter erscheinen. */
    	background:#DDDDDD;
    } 
    .twoColLiqLtHdr #footer p {
    	margin: 0; /* Wenn Sie die RÃ¤nder des ersten Elements in der FuÃŸzeile auf 0 einstellen, kÃ¶nnen Sie unerwartete AbstÃ¤nde zwischen divs vermeiden. */
    	padding: 10px 0; /* Durch die Verwendung der AuffÃ¼llung bei diesem Element entsteht genau wie bei einem Rand ein Leerraum, aber ohne die potenziellen Abstandsprobleme. */
    }
    
    /* Verschiedene wieder verwertbare Klassen */
    .fltrt { /* Mit dieser Klasse kÃ¶nnen Sie ein Element auf der Seite nach rechts flieÃŸen lassen. Das floatende Element muss vor dem Element stehen, neben dem es auf der Seite erscheinen soll. */
    	float: right;
    	margin-left: 8px;
    }
    .fltlft { /* Mit dieser Klasse kÃ¶nnen Sie ein Element auf der Seite nach links flieÃŸen lassen. */
    	float: left;
    	margin-right: 8px;
    }
    .clearfloat { /* Diese Klasse sollte in einem div- oder break-Element platziert werden und das letzte Element vor dem SchlieÃŸen eines Containers sein, der wiederum einen vollstÃ¤ndigen Float enthalten sollte. */
    	clear:both;
        height:0;
        font-size: 1px;
        line-height: 0px;
    }
